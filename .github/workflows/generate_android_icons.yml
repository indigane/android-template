
name: Generate Android Icons

# This workflow is triggered manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Path to the source icon image (e.g., assets/icon.png)'
        required: true
        default: 'test_icon.png'
      commit_message:
        description: 'Commit message for the icon update'
        required: true
        default: 'feat(assets): generate new android icons'
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-icons:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1. Check out the repository's code to the runner
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      # 2. Define icon sizes and densities
      # These are the standard Android densities and corresponding icon sizes in pixels.
      - name: Set up icon dimensions
        id: dimensions
        run: |
          echo "sizes=(48 72 96 144 192 512)" >> $GITHUB_ENV
          echo "densities=(mdpi hdpi xhdpi xxhdpi xxxhdpi playstore)" >> $GITHUB_ENV
          echo "android_res_path=app/src/main/res" >> $GITHUB_ENV # Adjust this path to your project structure

      # 3. Generate standard square icons
      - name: Generate Square Icons
        run: |
          source_file="${{ github.event.inputs.source_image || 'test_icon.png' }}"
          if [ -z "$source_file" ]; then
            echo "Error: source_image input was empty or not correctly passed to the script (source_file variable is empty)."
            exit 1
          fi
          if [ ! -f "$source_file" ]; then
            echo "Error: Source file not found at $source_file"
            exit 1
          fi
          sizes=${{ env.sizes }}
          densities=${{ env.densities }}
          echo "Generating square icons..."
          for i in ${!sizes[@]}; do
            size=${sizes[$i]}
            density=${densities[$i]}

            # Create the output directory if it doesn't exist
            output_dir="${{ env.android_res_path }}/mipmap-${density}"
            mkdir -p "$output_dir"

            # Use ImageMagick to resize the source image
            convert "$source_file" -resize "${size}x${size}" "$output_dir/ic_launcher.png"
            echo "Created $output_dir/ic_launcher.png"
          done

      # 4. Generate round icons
      - name: Generate Round Icons
        run: |
          set -e # Ensures script exits immediately on error
          source_file="${{ github.event.inputs.source_image || 'test_icon.png' }}"
          if [ -z "$source_file" ]; then
            echo "Error: source_image input was empty or not correctly passed to the script (source_file variable is empty)."
            exit 1
          fi
          if [ ! -f "$source_file" ]; then
            echo "Error: Source file not found at $source_file"
            exit 1
          fi
          sizes=${{ env.sizes }}
          densities=${{ env.densities }}
          echo "Generating round icons..."
          for i in ${!sizes[@]}; do
            size=${sizes[$i]}
            density=${densities[$i]}
            output_dir="${{ env.android_res_path }}/mipmap-${density}"
            output_file="$output_dir/ic_launcher_round.png"

            # Original: convert "$source_file" -resize "${size}x${size}"             #   \( +clone -alpha extract             #      -draw "fill black polygon 0,0 0,${size} ${size},${size} ${size},0 fill white circle ${size/2},${size/2} ${size/2},0"             #      \( +clone -flip \) -compose Multiply -composite             #      \( +clone -flip \) -compose Multiply -composite             #   \) -alpha off -compose CopyOpacity -composite "$output_file"

            # New approach:
            temp_resized_file="temp_resized_${density}.png"
            temp_mask_file="temp_mask_${density}.png"

            # 1. Resize the source image and ensure it has an alpha channel
            convert "$source_file" -resize "${size}x${size}" -alpha set "$temp_resized_file"
            if [ $? -ne 0 ]; then
              echo "Error during ${density} icon generation at resize step for $source_file" >&2
              exit 1
            fi

            # 2. Create a grayscale circular mask (black background, white circle)
            # Using $(()) for bash arithmetic to ensure correct calculation for center/edge points
            center_x=$((${size}/2))
            center_y=$((${size}/2))
            edge_x=$((${size}/2)) # For a circle touching the top-middle edge, this is same as center_x
            edge_y=0
            convert -size "${size}x${size}" xc:black -fill white -draw "circle ${center_x},${center_y} ${edge_x},${edge_y}" "$temp_mask_file"
            if [ $? -ne 0 ]; then
              echo "Error during ${density} icon generation at mask creation step" >&2
              exit 1
            fi

            # 3. Composite the resized image with the mask
            # This copies the white areas of the mask into the alpha channel of the resized image
            convert "$temp_resized_file" "$temp_mask_file" -compose CopyOpacity -composite "$output_file"
            if [ $? -ne 0 ]; then
              echo "Error during ${density} icon generation at composite step" >&2
              exit 1
            fi

            # 4. Clean up temporary files
            rm "$temp_resized_file" "$temp_mask_file"

            echo "Created $output_file"
          done

      # 5. Generate monochrome/silhouette icon for Android 13+ themed icons
      # This creates a single foreground asset. It should be referenced in an adaptive XML file.
      - name: Generate Monochrome Icon
        run: |
          source_file="${{ github.event.inputs.source_image || 'test_icon.png' }}"
          if [ -z "$source_file" ]; then
            echo "Error: source_image input was empty or not correctly passed to the script (source_file variable is empty)."
            exit 1
          fi
          if [ ! -f "$source_file" ]; then
            echo "Error: Source file not found at $source_file"
            exit 1
          fi
          output_dir="${{ env.android_res_path }}/drawable"
          mkdir -p "$output_dir"

          # Convert the image to a simple black & white silhouette
          # The threshold value can be adjusted (e.g., 50%) to get the best result
          convert "$source_file" -resize "108x108" -gravity center -colorspace gray -threshold 50% +transparent "#000000" "$output_dir/ic_launcher_monochrome.png"
          echo "Created $output_dir/ic_launcher_monochrome.png"

      - name: Set Commit Message
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.commit_message }}" ]; then
            echo "COMMIT_MSG=${{ github.event.inputs.commit_message }}" >> $GITHUB_ENV
          else
            echo "COMMIT_MSG=feat(assets): update generated Android icons [CI]" >> $GITHUB_ENV
          fi

      # 6. Commit the generated files to the repository
      - name: Commit and Push new icons
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{ env.COMMIT_MSG }}
          file_pattern: ${{ env.android_res_path }}/**/*.png # Pattern to match the new icons
